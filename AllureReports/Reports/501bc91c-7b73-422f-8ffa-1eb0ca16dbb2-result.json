{"name": "test_emp_search", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\n  (Session info: headless chrome=112.0.5615.138)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x0024DCE3+50899]\n\t(No symbol) [0x001DE111]\n\t(No symbol) [0x000E5450]\n\t(No symbol) [0x0010C706]\n\t(No symbol) [0x0010BFD0]\n\t(No symbol) [0x0012B8FC]\n\t(No symbol) [0x00108EC6]\n\t(No symbol) [0x0012BC54]\n\t(No symbol) [0x0013E01C]\n\t(No symbol) [0x0012B6F6]\n\t(No symbol) [0x00107708]\n\t(No symbol) [0x0010886D]\n\tGetHandleVerifier [0x004B3EAE+2566302]\n\tGetHandleVerifier [0x004E92B1+2784417]\n\tGetHandleVerifier [0x004E327C+2759788]\n\tGetHandleVerifier [0x002E5740+672048]\n\t(No symbol) [0x001E8872]\n\t(No symbol) [0x001E41C8]\n\t(No symbol) [0x001E42AB]\n\t(No symbol) [0x001D71B7]\n\tBaseThreadInitThunk [0x76920099+25]\n\tRtlGetAppContainerNamedObjectPath [0x76FA7B6E+286]\n\tRtlGetAppContainerNamedObjectPath [0x76FA7B3E+238]\n\t(No symbol) [0x00000000]", "trace": "self = <testCases.test_EmpSearch.Test_EmpSearch object at 0x0000027B20197110>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"00766c49e6ee1f9338bb52b313a3de5a\")>\nrandom_generator = 'vlm6ceqy'\n\n    @pytest.mark.sanity\n    def test_emp_search(self, setup, random_generator):\n        self.driver = setup\n        self.log.info(\"Test case Started\")\n        self.log.info(\" Test case  Opneing url -->\" + self.baseUrl)\n        self.driver.get(self.baseUrl)\n        self.lg = LoginPageClass(self.driver)\n        # time.sleep(2)\n        self.lg.setemail(self.username)\n        self.log.info(\"Enter Username -->\" + self.username)\n        self.lg.setpassword(self.password)\n        self.log.info(\"password -->\" + self.password)\n        self.lg.clicklogin()\n        self.log.info(\"Enter login\")\n        self.ae = AddEmpClass(self.driver)\n        self.ae.clickpim()\n        self.log.info(\"Click on Pim\")\n        self.es = SearchEmp(self.driver)\n>       self.es.clickempid(\"0221\")\n\ntestCases\\test_EmpSearch.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npageObjects\\SearchEmpPage.py:22: in clickempid\n    self.driver.find_element(By.XPATH, \"/html[1]/body[1]/div[1]/div[1]/div[2]/div[2]/div[1]/div[1]/div[2]/form[1]/div[1]/div[1]/div[2]/div[1]/div[2]/input[1]\").send_keys(empid)\nC:\\Python\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:231: in send_keys\n    self._execute(\nC:\\Python\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:403: in _execute\n    return self._parent.execute(command, params)\nC:\\Python\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000027B1F942D90>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...jectPath [0x76FA7B6E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x76FA7B3E+238]\\\\n\\\\t(No symbol) [0x00000000]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: headless chrome=112.0.5615.138)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x0024DCE3+50899]\nE       \t(No symbol) [0x001DE111]\nE       \t(No symbol) [0x000E5450]\nE       \t(No symbol) [0x0010C706]\nE       \t(No symbol) [0x0010BFD0]\nE       \t(No symbol) [0x0012B8FC]\nE       \t(No symbol) [0x00108EC6]\nE       \t(No symbol) [0x0012BC54]\nE       \t(No symbol) [0x0013E01C]\nE       \t(No symbol) [0x0012B6F6]\nE       \t(No symbol) [0x00107708]\nE       \t(No symbol) [0x0010886D]\nE       \tGetHandleVerifier [0x004B3EAE+2566302]\nE       \tGetHandleVerifier [0x004E92B1+2784417]\nE       \tGetHandleVerifier [0x004E327C+2759788]\nE       \tGetHandleVerifier [0x002E5740+672048]\nE       \t(No symbol) [0x001E8872]\nE       \t(No symbol) [0x001E41C8]\nE       \t(No symbol) [0x001E42AB]\nE       \t(No symbol) [0x001D71B7]\nE       \tBaseThreadInitThunk [0x76920099+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x76FA7B6E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x76FA7B3E+238]\nE       \t(No symbol) [0x00000000]\n\nC:\\Python\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: ElementNotInteractableException"}, "attachments": [{"name": "log", "source": "17370402-6673-4791-86d1-4e365dd81b34-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "255e9679-ea30-442a-b147-70ccb38d4b34-attachment.txt", "type": "text/plain"}], "start": 1682769049096, "stop": 1682769065813, "uuid": "6f20bc47-12cc-4135-bcbd-b40a9696542e", "historyId": "eb46b0d34d3c27cc521335285c0b1b98", "testCaseId": "7b86944a42aa5ac2348361c80761d3ff", "fullName": "testCases.test_EmpSearch.Test_EmpSearch#test_emp_search", "labels": [{"name": "tag", "value": "sanity"}, {"name": "parentSuite", "value": "testCases"}, {"name": "suite", "value": "test_EmpSearch"}, {"name": "subSuite", "value": "Test_EmpSearch"}, {"name": "host", "value": "Tushar-Pc"}, {"name": "thread", "value": "29532-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testCases.test_EmpSearch"}]}